import {
    generateSubthemeButtons,
    getLimbLevelKeyByIdx,
    isAdmin,
    generateAddSubthemeButtons,
    getAllLimbLevels,
    getLimbLevelByIdx,
    // findThemeById
} from "../helpers/functions.js";
import fs from "fs";
import { adminStates } from "../helpers/stateController.js";
import { LIMBS } from "../helpers/consts.js";

/*
–õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã (–ø–æ —à–∞–≥–∞–º)
1. –ê–¥–º–∏–Ω –≤—ã–±–∏—Ä–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ:
    - –î–æ–±–∞–≤–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–µ–º–µ
    - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥—Ç–µ–º—É

2. –ï—Å–ª–∏ "–¥–æ–±–∞–≤–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ":
    - –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –¥–µ—Ä–µ–≤—É —Ç–µ–º (–ø–æ —É—Ä–æ–≤–Ω—è–º)
    - –í—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –∏ —É—Ä–æ–≤–Ω—è –∞–º–ø—É—Ç–∞—Ü–∏–∏
    - –ï—Å–ª–∏ –≤–∏–¥–µ–æ —É–∂–µ –µ—Å—Ç—å ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∑–∞–º–µ–Ω–∏—Ç—å –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å
    - –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å
    - –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–∑–∞–º–µ–Ω—ã ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON

3. –ï—Å–ª–∏ "—Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥—Ç–µ–º—É":
    - –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã
    - –ü–æ–æ—á–µ—Ä–µ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ –ø–æ –≤—Å–µ–º —É—Ä–æ–≤–Ω—è–º –∞–º–ø—É—Ç–∞—Ü–∏–∏ –∏ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—è–º (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–æ–ø—É—Å–∫–∞)
    - –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ videos_by_level –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã
    - –ü–æ–¥—Ç–µ–º–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å" —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏
    - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ JSON
* */

export function adminPanelLogic(bot, logicLoader, logicFilePath) {
    // --- –°—Ç–∞—Ä—Ç–æ–≤–æ–µ –º–µ–Ω—é ---
    bot.onText(/\/admin/, async (msg) => {
        const chatId = msg.chat.id;
        if (!isAdmin(msg.from.username)) {
            return bot.sendMessage(chatId, "–ù–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
        }

        adminStates.set(chatId, { mode: "main_menu" });
        await bot.sendMessage(chatId, "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", {
            reply_markup: {
                inline_keyboard: [
                    [{ text: "üìπ –î–æ–±–∞–≤–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", callback_data: "admin_edit_video" }],
                    [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥—Ç–µ–º—É", callback_data: "admin_new_subtheme" }],
                    [{ text: "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", callback_data: "admin_view_structure" }]
                ]
            },
            parse_mode: "Markdown"
        });
    });

    // --- Callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ ---
    bot.on("callback_query", async (cbq) => {
        const chatId = cbq.message.chat.id;
        if (!isAdmin(cbq.from.username)) return;

        let state = adminStates.get(chatId) || {};
        const data = cbq.data;

        try {
            // --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---
// --- –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã ---
            if (data === "admin_view_structure") {
                try {
                    const logic = logicLoader.getLogic();
                    const structureText = buildStructureText(logic.themes);

                    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
                    const messageParts = splitLongMessage(structureText);

                    for (let i = 0; i < messageParts.length; i++) {
                        const partHeader = messageParts.length > 1 ? `üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–º (${i + 1}/${messageParts.length}):**\n\n` : "üìã **–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ–º:**\n\n";

                        await bot.sendMessage(chatId, partHeader + messageParts[i], {
                            parse_mode: "Markdown",
                            reply_markup: i === messageParts.length - 1 ? {
                                inline_keyboard: [
                                    [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "admin_main_menu" }]
                                ]
                            } : undefined
                        });

                        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        if (i < messageParts.length - 1) {
                            await new Promise(resolve => setTimeout(resolve, 500));
                        }
                    }

                } catch (error) {
                    console.error("Structure view error:", error);
                    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "admin_main_menu" }]
                            ]
                        }
                    });
                }

                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ ---
            if (data === "admin_edit_video") {
                state = { mode: "edit_video_choose_limb" };
                adminStates.set(chatId, state);

                await bot.sendMessage(chatId, "üéØ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å:", {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "ü¶µ –ù–æ–≥–∏", callback_data: "admin_edit_limb_legs" }],
                            [{ text: "ü¶æ –†—É–∫–∏", callback_data: "admin_edit_limb_arms" }],
                            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "admin_main_menu" }]
                        ]
                    },
                    parse_mode: "Markdown"
                });
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –í—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
            if (data.startsWith("admin_edit_limb_")) {
                const limb = data.replace("admin_edit_limb_", "");
                state = { mode: "edit_video_navigate", limb, currentPath: [limb] };
                adminStates.set(chatId, state);

                const logic = logicLoader.getLogic();
                const limbTheme = logicLoader.findThemeById(limb, logic.themes);

                if (!limbTheme || !limbTheme.subthemes) {
                    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    return;
                }

                // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∞–º–ø—É—Ç–∞—Ü–∏–∏, —Å—Ä–∞–∑—É –∏–¥–µ–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º
                const questionsTheme = logicLoader.findThemeById(`${limb}_questions`, limbTheme.subthemes);
                if (!questionsTheme) {
                    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: —Ä–∞–∑–¥–µ–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    return;
                }

                state.currentPath.push(questionsTheme.id);
                adminStates.set(chatId, state);

                const buttons = generateEditNavigationButtons(questionsTheme.subthemes);
                buttons.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "admin_edit_video" }]);

                const limbName = limb === "legs" ? "–ù–æ–≥–∏" : "–†—É–∫–∏";
                await bot.sendMessage(chatId, `üìÅ **${limbName} - –í–æ–ø—Ä–æ—Å—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:`, {
                    reply_markup: { inline_keyboard: buttons },
                    parse_mode: "Markdown"
                });
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ç–µ–º–∞–º –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
            if (data.startsWith("admin_edit_nav_")) {
                const themeId = data.replace("admin_edit_nav_", "");
                const logic = logicLoader.getLogic();
                const theme = logicLoader.findThemeById(themeId, logic.themes);

                if (!theme) {
                    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    return;
                }

                state.currentPath.push(themeId);
                adminStates.set(chatId, state);

                // –ï—Å–ª–∏ —É —Ç–µ–º—ã –µ—Å—Ç—å videos_by_level - —ç—Ç–æ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                if (theme.videos_by_level) {
                    state.editThemeId = themeId;
                    state.mode = "edit_video_choose_level";
                    adminStates.set(chatId, state);

                    const levels = LIMBS[state.limb].levels;
                    const buttons = levels.map(lvl => [{
                        text: lvl.title,
                        callback_data: `admin_edit_level_${lvl.id}`
                    }]);
                    buttons.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `admin_edit_limb_${state.limb}` }]);

                    await bot.sendMessage(chatId, `üé¨ **${theme.title}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –∞–º–ø—É—Ç–∞—Ü–∏–∏:`, {
                        reply_markup: { inline_keyboard: buttons },
                        parse_mode: "Markdown"
                    });
                    await bot.answerCallbackQuery(cbq.id);
                    return;
                }

                // –ï—Å–ª–∏ —É —Ç–µ–º—ã –µ—Å—Ç—å subthemes - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
                if (theme.subthemes && theme.subthemes.length > 0) {
                    const buttons = generateEditNavigationButtons(theme.subthemes);
                    buttons.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: `admin_edit_limb_${state.limb}` }]);

                    await bot.sendMessage(chatId, `üìÅ **${theme.title}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É:`, {
                        reply_markup: { inline_keyboard: buttons },
                        parse_mode: "Markdown"
                    });
                    await bot.answerCallbackQuery(cbq.id);
                    return;
                }

                await bot.sendMessage(chatId, "‚ùå –í —ç—Ç–æ–π —Ç–µ–º–µ –Ω–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.");
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –í—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –∞–º–ø—É—Ç–∞—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ---
            if (data.startsWith("admin_edit_level_")) {
                const levelId = data.replace("admin_edit_level_", "");
                state.editLevelId = levelId;
                state.mode = "edit_video_enter_url";
                adminStates.set(chatId, state);

                const logic = logicLoader.getLogic();
                const theme = logicLoader.findThemeById(state.editThemeId, logic.themes);

                if (!theme) {
                    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    return;
                }

                const currentVideo = theme.videos_by_level?.[levelId] || null;
                const levelInfo = getLimbLevelByIdx(getAllLimbLevels().indexOf(levelId));

                let msg = `üé¨ **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ**\n\n`;
                msg += `**–¢–µ–º–∞:** ${theme.title}\n`;
                msg += `**–£—Ä–æ–≤–µ–Ω—å:** ${levelInfo ? levelInfo.title : levelId}\n\n`;

                if (currentVideo) {
                    msg += `**–¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ:** ${currentVideo}\n\n`;
                    msg += `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ "-" —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π:`;
                } else {
                    msg += `–í–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:`;
                }

                await bot.sendMessage(chatId, msg, { parse_mode: "Markdown" });
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã ---
            if (data === "admin_new_subtheme") {
                state = { mode: "add_choose_limb" };
                adminStates.set(chatId, state);

                await bot.sendMessage(chatId, "üÜï **–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã**\n\n–î–ª—è –∫–∞–∫–æ–π –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏?", {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "ü¶µ –ù–æ–≥–∏", callback_data: "admin_add_limb_legs" }],
                            [{ text: "ü¶æ –†—É–∫–∏", callback_data: "admin_add_limb_arms" }],
                            [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "admin_main_menu" }]
                        ]
                    },
                    parse_mode: "Markdown"
                });
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –í—ã–±–æ—Ä –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã ---
            if (data.startsWith("admin_add_limb_")) {
                const limb = data.replace("admin_add_limb_", "");
                state = { mode: "add_choose_parent", limb };
                adminStates.set(chatId, state);

                const logic = logicLoader.getLogic();
                const limbTheme = logicLoader.findThemeById(limb, logic.themes);
                const questionsTheme = logicLoader.findThemeById(`${limb}_questions`, limbTheme?.subthemes || []);

                if (!questionsTheme) {
                    await bot.sendMessage(chatId, "‚ùå –†–∞–∑–¥–µ–ª –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                    return;
                }

                const buttons = generateAddSubthemeButtons(questionsTheme.subthemes || []);
                buttons.push([{ text: "üìÅ –í –∫–æ—Ä–µ–Ω—å –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data: `admin_add_parent_${questionsTheme.id}` }]);
                buttons.push([{ text: "üîô –ù–∞–∑–∞–¥", callback_data: "admin_new_subtheme" }]);

                const limbName = limb === "legs" ? "–ù–æ–≥–∏" : "–†—É–∫–∏";
                await bot.sendMessage(chatId, `üìÇ **${limbName}**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Ç–µ–º—É:`, {
                    reply_markup: { inline_keyboard: buttons },
                    parse_mode: "Markdown"
                });
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –í—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ç–µ–º—ã ---
            if (data.startsWith("admin_add_parent_") || data.startsWith("admin_add_subtheme_to_")) {
                const parentId = data.replace("admin_add_parent_", "").replace("admin_add_subtheme_to_", "");
                state.parentId = parentId;
                state.mode = "enter_subtheme_title";
                state.videos = {};
                adminStates.set(chatId, state);

                await bot.sendMessage(chatId, "‚úèÔ∏è **–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã:**");
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –ü—Ä–æ–ø—É—Å–∫ –≤–∏–¥–µ–æ ---
            if (data.startsWith("admin_skip_video_")) {
                const idx = parseInt(data.replace("admin_skip_video_", ""), 10);
                if (!state.videos) state.videos = {};
                state.videos[getLimbLevelKeyByIdx(idx)] = "";
                await askNextVideo(bot, chatId, state, idx + 1, logicLoader, logicFilePath);
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

            // --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
            if (data === "admin_main_menu") {
                adminStates.set(chatId, { mode: "main_menu" });
                await bot.sendMessage(chatId, "üîß **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å**\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: "üìπ –î–æ–±–∞–≤–∏—Ç—å/–∑–∞–º–µ–Ω–∏—Ç—å –≤–∏–¥–µ–æ", callback_data: "admin_edit_video" }],
                            [{ text: "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–æ–¥—Ç–µ–º—É", callback_data: "admin_new_subtheme" }],
                            [{ text: "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã", callback_data: "admin_view_structure" }]
                        ]
                    },
                    parse_mode: "Markdown"
                });
                await bot.answerCallbackQuery(cbq.id);
                return;
            }

        } catch (error) {
            console.error("Admin panel error:", error);
            await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
            await bot.answerCallbackQuery(cbq.id);
        }
    });

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π ---
    bot.on("message", async (msg) => {
        const chatId = msg.chat.id;
        if (!isAdmin(msg.from.username)) return;
        if (msg.text?.startsWith('/')) return; // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã

        let state = adminStates.get(chatId);
        if (!state) return;

        try {
            // --- –í–≤–æ–¥ URL –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ ---
            if (state.mode === "edit_video_enter_url") {
                const logic = logicLoader.getLogic();
                const theme = logicLoader.findThemeById(state.editThemeId, logic.themes);

                if (!theme) {
                    await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                    adminStates.set(chatId, { mode: "main_menu" });
                    return;
                }

                if (!theme.videos_by_level) theme.videos_by_level = {};

                if (msg.text === "-") {
                    await bot.sendMessage(chatId, "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.", {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "admin_main_menu" }]
                            ]
                        }
                    });
                } else {
                    theme.videos_by_level[state.editLevelId] = msg.text;
                    fs.writeFileSync(logicFilePath, JSON.stringify(logic, null, 2), "utf-8");
                    await bot.sendMessage(chatId, "‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "admin_main_menu" }]
                            ]
                        }
                    });
                }
                adminStates.set(chatId, { mode: "main_menu" });
                return;
            }

            // --- –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã ---
            if (state.mode === "enter_subtheme_title") {
                state.subthemeTitle = msg.text;
                state.mode = "add_videos";
                state.videoIdx = 0;
                if (!state.videos) state.videos = {};
                adminStates.set(chatId, state);

                await askNextVideo(bot, chatId, state, 0, logicLoader, logicFilePath);
                return;
            }

            // --- –í–≤–æ–¥ URL –≤–∏–¥–µ–æ –¥–ª—è –Ω–æ–≤–æ–π –ø–æ–¥—Ç–µ–º—ã ---
            if (state.mode === "add_videos") {
                const idx = state.videoIdx || 0;
                if (!state.videos) state.videos = {};

                const levelKey = getLimbLevelKeyByIdx(idx);
                if (levelKey) {
                    state.videos[levelKey] = msg.text === "-" ? "" : msg.text;
                    await askNextVideo(bot, chatId, state, idx + 1, logicLoader, logicFilePath);
                }
                return;
            }

        } catch (error) {
            console.error("Admin message error:", error);
            await bot.sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
        }
    });

    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
    function generateEditNavigationButtons(subthemes) {
        if (!subthemes || !Array.isArray(subthemes)) return [];
        return subthemes.map(theme => [{
            text: theme.title,
            callback_data: `admin_edit_nav_${theme.id}`
        }]);
    }

    function buildStructureText(themes, level = 0, maxDepth = 3) {
        if (!themes || !Array.isArray(themes) || level > maxDepth) return "";

        let text = "";
        const indent = "  ".repeat(level);

        themes.forEach(theme => {
            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è markdown
            const safeTitle = escapeMarkdown(theme.title);
            const safeId = escapeMarkdown(theme.id);

            text += `${indent}üìÅ ${safeTitle} \`${safeId}\`\n`;

            if (theme.videos_by_level && Object.keys(theme.videos_by_level).length > 0) {
                const videoCount = Object.keys(theme.videos_by_level).length;
                text += `${indent}  üé¨ –í–∏–¥–µ–æ: ${videoCount}\n`;
            }

            if (theme.subthemes && theme.subthemes.length > 0 && level < maxDepth) {
                text += buildStructureText(theme.subthemes, level + 1, maxDepth);
            }
        });

        return text;
    }

    async function askNextVideo(bot, chatId, state, idx, logicLoader, logicFilePath) {
        const allLevels = getAllLimbLevels();

        if (idx >= allLevels.length) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—É—é –ø–æ–¥—Ç–µ–º—É
            await saveNewSubtheme(bot, chatId, state, logicLoader, logicFilePath);
            return;
        }

        const levelData = getLimbLevelByIdx(idx);
        if (!levelData) {
            await askNextVideo(bot, chatId, state, idx + 1, logicLoader, logicFilePath);
            return;
        }

        const { limb, title } = levelData;
        const limbName = limb === "legs" ? "–ù–æ–≥–∏" : "–†—É–∫–∏";

        state.mode = "add_videos";
        state.videoIdx = idx;
        adminStates.set(chatId, state);

        await bot.sendMessage(chatId,
            `üé¨ **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ ${idx + 1}/${allLevels.length}**\n\n**${limbName} - ${title}**\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ "-" —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å:`,
            {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data: `admin_skip_video_${idx}` }]
                    ]
                },
                parse_mode: "Markdown"
            }
        );
    }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è markdown —Å–∏–º–≤–æ–ª–æ–≤
    function escapeMarkdown(text) {
        if (!text) return "";
        return text.replace(/[_*[\]()~`>#+=|{}.!-]/g, '\\$&');
    }

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏
    function splitLongMessage(text, maxLength = 3500) {
        if (text.length <= maxLength) return [text];

        const parts = [];
        const lines = text.split('\n');
        let currentPart = "";

        for (const line of lines) {
            if ((currentPart + line + '\n').length > maxLength) {
                if (currentPart) {
                    parts.push(currentPart.trim());
                    currentPart = line + '\n';
                } else {
                    // –ï—Å–ª–∏ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –±–æ–ª—å—à–µ –ª–∏–º–∏—Ç–∞, –æ–±—Ä–µ–∑–∞–µ–º –µ—ë
                    parts.push(line.substring(0, maxLength - 3) + "...");
                }
            } else {
                currentPart += line + '\n';
            }
        }

        if (currentPart.trim()) {
            parts.push(currentPart.trim());
        }

        return parts;
    }

    async function saveNewSubtheme(bot, chatId, state, logicLoader, logicFilePath) {
        try {
            const logic = logicLoader.getLogic();
            const parentTheme = logicLoader.findThemeById(state.parentId, logic.themes);

            if (!parentTheme) {
                await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è —Ç–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
                adminStates.set(chatId, { mode: "main_menu" });
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º videos_by_level (—Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –≤–∏–¥–µ–æ)
            const videos_by_level = {};
            if (state.videos) {
                Object.keys(state.videos).forEach(key => {
                    if (state.videos[key] && state.videos[key].trim() !== "") {
                        videos_by_level[key] = state.videos[key].trim();
                    }
                });
            }

            const newSubtheme = {
                id: `custom_${Date.now()}`,
                title: state.subthemeTitle,
                level: (parentTheme.level || 4) + 1,
                videos_by_level,
                subthemes: []
            };

            if (!parentTheme.subthemes) parentTheme.subthemes = [];
            parentTheme.subthemes.push(newSubtheme);

            fs.writeFileSync(logicFilePath, JSON.stringify(logic, null, 2), "utf-8");

            await bot.sendMessage(chatId, `‚úÖ –ü–æ–¥—Ç–µ–º–∞ "${state.subthemeTitle}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`, {
                reply_markup: {
                    inline_keyboard: [
                        [{ text: "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data: "admin_main_menu" }]
                    ]
                }
            });

            adminStates.set(chatId, { mode: "main_menu" });

        } catch (error) {
            console.error("Save subtheme error:", error);
            await bot.sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–¥—Ç–µ–º—ã.");
            adminStates.set(chatId, { mode: "main_menu" });
        }
    }
}
